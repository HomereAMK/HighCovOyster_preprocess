#library(devtools)
#install_github("drveera/ggman")
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont, lemon, data.table, ggman)
# Loads datasets ~
CRES.PONT <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CRES.PONT--ALLpop_Fst.tsv", header = FALSE)
PONT.CLEW <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_PONT.CLEW--ALLpop_Fst.tsv", header = FALSE)
CLEW.GREV <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CLEW.GREV--ALLpop_Fst.tsv", header = FALSE)
GREV.NISS <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_GREV.NISS--ALLpop_Fst.tsv", header = FALSE)
NISS.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/FULLNOLIST_SlWin_aug22_NISS.LANG_15KB_15KB--Fst.tsv", header = FALSE)
#EuropeanFlounder_2 <- read.table("BSG_EuropeanFlounder_NorthSea.BornholmBasin_Ind66_20K--Fst-Window.tsv", header = FALSE)
OSTR.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_OSTR.LANG--ALLpop_Fst.tsv", header = FALSE)
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Fst | By George Pacheco modified by Homère J. Alves Monteiro
# Cleans the environment ~
rm(list=ls())
#install ggman
#library(devtools)
#install_github("drveera/ggman")
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont, lemon, data.table, ggman)
# Loads datasets ~
CRES.PONT <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CRES.PONT--ALLpop_Fst.tsv", header = FALSE)
PONT.CLEW <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_PONT.CLEW--ALLpop_Fst.tsv", header = FALSE)
CLEW.GREV <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CLEW.GREV--ALLpop_Fst.tsv", header = FALSE)
GREV.NISS <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_GREV.NISS--ALLpop_Fst.tsv", header = FALSE)
NISS.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/FULLNOLIST_SlWin_aug22_NISS.LANG_15KB_15KB--Fst.tsv", header = FALSE)
#EuropeanFlounder_2 <- read.table("BSG_EuropeanFlounder_NorthSea.BornholmBasin_Ind66_20K--Fst-Window.tsv", header = FALSE)
OSTR.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_OSTR.LANG--ALLpop_Fst.tsv", header = FALSE)
# Adds column names to MissingData ~
colnames(CRES.PONT) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(PONT.CLEW) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(CLEW.GREV) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(GREV.NISS) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(NISS.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
#colnames(EuropeanFlounder_2) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(OSTR.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
# Adds Pops column to each DF ~
CRES.PONT$Species <- factor(paste("Croatia vs. Spain"))
PONT.CLEW$Species <- factor(paste("Spain vs. Ireland"))
CLEW.GREV$Species <- factor(paste("Ireland vs. Netherlands"))
GREV.NISS$Species <- factor(paste("Netherlands vs. Denmark"))
NISS.LANG$Species <- factor(paste("Denmark vs. South Norway1"))
#EuropeanFlounder_2$Species <- factor(paste("North Sea - Bornholm Basin"))
OSTR.LANG$Species <- factor(paste("South Norway2 vs South Norway1"))
# Adds corrected gPoint to each DF ~
CRES.PONT$gPoint_c <- seq(15000, by = 20000, length.out = nrow(CRES.PONT))
PONT.CLEW$gPoint_c <- seq(15000, by = 20000, length.out = nrow(PONT.CLEW))
CLEW.GREV$gPoint_c <- seq(15000, by = 20000, length.out = nrow(CLEW.GREV))
GREV.NISS$gPoint_c <- seq(15000, by = 20000, length.out = nrow(GREV.NISS))
NISS.LANG$gPoint_c <- seq(15000, by = 20000, length.out = nrow(NISS.LANG))
OSTR.LANG$gPoint_c <- seq(15000, by = 20000, length.out = nrow(OSTR.LANG))
# Adds CHR_State in order to have alternate colours ~
CRES.PONT_CHR_IDs <- as.data.frame(unique(CRES.PONT$CHR)); colnames(CRES.PONT_CHR_IDs) <- c("CHR")
CRES.PONT_CHR_IDs$CHR_IDs <- seq.int(nrow(CRES.PONT_CHR_IDs))
CRES.PONTUp <- merge(CRES.PONT, CRES.PONT_CHR_IDs, by = "CHR")
CRES.PONTUp <- CRES.PONTUp %>% arrange(CHR_IDs)
CRES.PONTUp$CHR_State <- ifelse(CRES.PONTUp$CHR_IDs %% 2 == 0, "Even", "Odd")
PONT.CLEW_CHR_IDs <- as.data.frame(unique(PONT.CLEW$CHR)); colnames(PONT.CLEW_CHR_IDs) <- c("CHR")
PONT.CLEW_CHR_IDs$CHR_IDs <- seq.int(nrow(PONT.CLEW_CHR_IDs))
PONT.CLEWUp <- merge(PONT.CLEW, PONT.CLEW_CHR_IDs, by = "CHR")
PONT.CLEWUp <- PONT.CLEWUp %>% arrange(CHR_IDs)
PONT.CLEWUp$CHR_State <- ifelse(PONT.CLEWUp$CHR_IDs %% 2 == 0, "Even", "Odd")
CLEW.GREV_CHR_IDs <- as.data.frame(unique(CLEW.GREV$CHR)); colnames(CLEW.GREV_CHR_IDs) <- c("CHR")
CLEW.GREV_CHR_IDs$CHR_IDs <- seq.int(nrow(CLEW.GREV_CHR_IDs))
CLEW.GREVUp <- merge(CLEW.GREV, CLEW.GREV_CHR_IDs, by = "CHR")
CLEW.GREVUp <- CLEW.GREVUp %>% arrange(CHR_IDs)
CLEW.GREVUp$CHR_State <- ifelse(CLEW.GREVUp$CHR_IDs %% 2 == 0, "Even", "Odd")
GREV.NISS_CHR_IDs <- as.data.frame(unique(GREV.NISS$CHR)); colnames(GREV.NISS_CHR_IDs) <- c("CHR")
GREV.NISS_CHR_IDs$CHR_IDs <- seq.int(nrow(GREV.NISS_CHR_IDs))
GREV.NISSUp <- merge(GREV.NISS, GREV.NISS_CHR_IDs, by = "CHR")
GREV.NISSUp <- GREV.NISSUp %>% arrange(CHR_IDs)
GREV.NISSUp$CHR_State <- ifelse(GREV.NISSUp$CHR_IDs %% 2 == 0, "Even", "Odd")
NISS.LANG_CHR_IDs <- as.data.frame(unique(NISS.LANG$CHR)); colnames(NISS.LANG_CHR_IDs) <- c("CHR")
NISS.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(NISS.LANG_CHR_IDs))
NISS.LANGUp <- merge(NISS.LANG, NISS.LANG_CHR_IDs, by = "CHR")
NISS.LANGUp <- NISS.LANGUp %>% arrange(CHR_IDs)
NISS.LANGUp$CHR_State <- ifelse(NISS.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
OSTR.LANG_CHR_IDs <- as.data.frame(unique(OSTR.LANG$CHR)); colnames(OSTR.LANG_CHR_IDs) <- c("CHR")
OSTR.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(OSTR.LANG_CHR_IDs))
OSTR.LANGUp <- merge(OSTR.LANG, OSTR.LANG_CHR_IDs, by = "CHR")
OSTR.LANGUp <- OSTR.LANGUp %>% arrange(CHR_IDs)
OSTR.LANGUp$CHR_State <- ifelse(OSTR.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
# Gets column names ~
fulldf <- rbind(CRES.PONTUp, PONT.CLEWUp, CLEW.GREVUp, GREV.NISSUp, NISS.LANGUp, OSTR.LANGUp)
# Reorders Species ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("Croatia vs. Spain",
"Spain vs. Ireland",
"Ireland vs. Netherlands",
"Netherlands vs. Denmark",
"Denmark vs. South Norway1",
"South Norway1 vs South Norway2"))
# Creates plot ~
Fst_Plot <-
ggplot() +
geom_point(data = fulldf, aes(x = gPoint_c, y = Fst, fill= CHR_State, colour = CHR_State), shape = 21, size = .15, alpha = 0.4) +
facet_rep_grid(Species ~. , scales = "free") +
scale_x_continuous("Chromosomes",
expand = c(.005, .005)) +
scale_y_continuous("Fst (15Kb Sliding Windows)",
breaks = c(.3, .6, .9),
labels = c(".3", ".6", ".9"),
limits = c(0, .92),
expand = c(0.01, 0.01)) +
scale_fill_manual(values = c("#add5f7", "#f7cfad")) +
scale_colour_manual(values = c("#add5f7", "#f7cfad")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 12, face = "bold", color = "#000000", margin = margin(t = 30, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 8, face = "bold", color = "#000000", margin = margin(t = 0, r = 30, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = .2),
strip.text = element_text(colour = "#000000", size = 5.5, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 30, b = 25, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = "none", fill = "none")
Fst_Plot
# ~ Plots BSG_Combined--Fst | By George Pacheco modified by Homère J. Alves Monteiro
# Cleans the environment ~
rm(list=ls())
#install ggman
#library(devtools)
#install_github("drveera/ggman")
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont, lemon, data.table, ggman)
# Loads datasets ~
CRES.PONT <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CRES.PONT--ALLpop_Fst.tsv", header = FALSE)
PONT.CLEW <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_PONT.CLEW--ALLpop_Fst.tsv", header = FALSE)
CLEW.GREV <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CLEW.GREV--ALLpop_Fst.tsv", header = FALSE)
GREV.NISS <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_GREV.NISS--ALLpop_Fst.tsv", header = FALSE)
NISS.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/FULLNOLIST_SlWin_aug22_NISS.LANG_15KB_15KB--Fst.tsv", header = FALSE)
#EuropeanFlounder_2 <- read.table("BSG_EuropeanFlounder_NorthSea.BornholmBasin_Ind66_20K--Fst-Window.tsv", header = FALSE)
OSTR.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_OSTR.LANG--ALLpop_Fst.tsv", header = FALSE)
# Adds column names to MissingData ~
colnames(CRES.PONT) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(PONT.CLEW) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(CLEW.GREV) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(GREV.NISS) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(NISS.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(OSTR.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
# Adds Pops column to each DF ~
CRES.PONT$Species <- factor(paste("Croatia vs. Spain"))
PONT.CLEW$Species <- factor(paste("Spain vs. Ireland"))
CLEW.GREV$Species <- factor(paste("Ireland vs. Netherlands"))
GREV.NISS$Species <- factor(paste("Netherlands vs. Denmark"))
NISS.LANG$Species <- factor(paste("Denmark vs. South Norway1"))
#EuropeanFlounder_2$Species <- factor(paste("North Sea - Bornholm Basin"))
OSTR.LANG$Species <- factor(paste("South Norway2 vs South Norway1"))
# Adds corrected gPoint to each DF ~
CRES.PONT$gPoint_c <- seq(15000, by = 20000, length.out = nrow(CRES.PONT))
PONT.CLEW$gPoint_c <- seq(15000, by = 20000, length.out = nrow(PONT.CLEW))
CLEW.GREV$gPoint_c <- seq(15000, by = 20000, length.out = nrow(CLEW.GREV))
GREV.NISS$gPoint_c <- seq(15000, by = 20000, length.out = nrow(GREV.NISS))
NISS.LANG$gPoint_c <- seq(15000, by = 20000, length.out = nrow(NISS.LANG))
OSTR.LANG$gPoint_c <- seq(15000, by = 20000, length.out = nrow(OSTR.LANG))
# Adds corrected gPoint to each DF ~
CRES.PONT$gPoint_c <- seq(15000, by = 15000, length.out = nrow(CRES.PONT))
PONT.CLEW$gPoint_c <- seq(15000, by = 15000, length.out = nrow(PONT.CLEW))
CLEW.GREV$gPoint_c <- seq(15000, by = 15000, length.out = nrow(CLEW.GREV))
GREV.NISS$gPoint_c <- seq(15000, by = 15000, length.out = nrow(GREV.NISS))
NISS.LANG$gPoint_c <- seq(15000, by = 15000, length.out = nrow(NISS.LANG))
OSTR.LANG$gPoint_c <- seq(15000, by = 15000, length.out = nrow(OSTR.LANG))
# Adds CHR_State in order to have alternate colours ~
CRES.PONT_CHR_IDs <- as.data.frame(unique(CRES.PONT$CHR)); colnames(CRES.PONT_CHR_IDs) <- c("CHR")
CRES.PONT_CHR_IDs$CHR_IDs <- seq.int(nrow(CRES.PONT_CHR_IDs))
CRES.PONTUp <- merge(CRES.PONT, CRES.PONT_CHR_IDs, by = "CHR")
CRES.PONTUp <- CRES.PONTUp %>% arrange(CHR_IDs)
CRES.PONTUp$CHR_State <- ifelse(CRES.PONTUp$CHR_IDs %% 2 == 0, "Even", "Odd")
PONT.CLEW_CHR_IDs <- as.data.frame(unique(PONT.CLEW$CHR)); colnames(PONT.CLEW_CHR_IDs) <- c("CHR")
PONT.CLEW_CHR_IDs$CHR_IDs <- seq.int(nrow(PONT.CLEW_CHR_IDs))
PONT.CLEWUp <- merge(PONT.CLEW, PONT.CLEW_CHR_IDs, by = "CHR")
PONT.CLEWUp <- PONT.CLEWUp %>% arrange(CHR_IDs)
PONT.CLEWUp$CHR_State <- ifelse(PONT.CLEWUp$CHR_IDs %% 2 == 0, "Even", "Odd")
CLEW.GREV_CHR_IDs <- as.data.frame(unique(CLEW.GREV$CHR)); colnames(CLEW.GREV_CHR_IDs) <- c("CHR")
CLEW.GREV_CHR_IDs$CHR_IDs <- seq.int(nrow(CLEW.GREV_CHR_IDs))
CLEW.GREVUp <- merge(CLEW.GREV, CLEW.GREV_CHR_IDs, by = "CHR")
CLEW.GREVUp <- CLEW.GREVUp %>% arrange(CHR_IDs)
CLEW.GREVUp$CHR_State <- ifelse(CLEW.GREVUp$CHR_IDs %% 2 == 0, "Even", "Odd")
GREV.NISS_CHR_IDs <- as.data.frame(unique(GREV.NISS$CHR)); colnames(GREV.NISS_CHR_IDs) <- c("CHR")
GREV.NISS_CHR_IDs$CHR_IDs <- seq.int(nrow(GREV.NISS_CHR_IDs))
GREV.NISSUp <- merge(GREV.NISS, GREV.NISS_CHR_IDs, by = "CHR")
GREV.NISSUp <- GREV.NISSUp %>% arrange(CHR_IDs)
GREV.NISSUp$CHR_State <- ifelse(GREV.NISSUp$CHR_IDs %% 2 == 0, "Even", "Odd")
NISS.LANG_CHR_IDs <- as.data.frame(unique(NISS.LANG$CHR)); colnames(NISS.LANG_CHR_IDs) <- c("CHR")
NISS.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(NISS.LANG_CHR_IDs))
NISS.LANGUp <- merge(NISS.LANG, NISS.LANG_CHR_IDs, by = "CHR")
NISS.LANGUp <- NISS.LANGUp %>% arrange(CHR_IDs)
NISS.LANGUp$CHR_State <- ifelse(NISS.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
OSTR.LANG_CHR_IDs <- as.data.frame(unique(OSTR.LANG$CHR)); colnames(OSTR.LANG_CHR_IDs) <- c("CHR")
OSTR.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(OSTR.LANG_CHR_IDs))
OSTR.LANGUp <- merge(OSTR.LANG, OSTR.LANG_CHR_IDs, by = "CHR")
OSTR.LANGUp <- OSTR.LANGUp %>% arrange(CHR_IDs)
OSTR.LANGUp$CHR_State <- ifelse(OSTR.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
# Gets column names ~
fulldf <- rbind(CRES.PONTUp, PONT.CLEWUp, CLEW.GREVUp, GREV.NISSUp, NISS.LANGUp, OSTR.LANGUp)
# Reorders Species ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("Croatia vs. Spain",
"Spain vs. Ireland",
"Ireland vs. Netherlands",
"Netherlands vs. Denmark",
"Denmark vs. South Norway1",
"South Norway1 vs South Norway2"))
# Creates plot ~
Fst_Plot <-
ggplot() +
geom_point(data = fulldf, aes(x = gPoint_c, y = Fst, fill= CHR_State, colour = CHR_State), shape = 21, size = .15, alpha = 0.4) +
facet_rep_grid(Species ~. , scales = "free") +
scale_x_continuous("Chromosomes",
expand = c(.005, .005)) +
scale_y_continuous("Fst (15Kb Sliding Windows)",
breaks = c(.3, .6, .9),
labels = c(".3", ".6", ".9"),
limits = c(0, .92),
expand = c(0.01, 0.01)) +
scale_fill_manual(values = c("#add5f7", "#f7cfad")) +
scale_colour_manual(values = c("#add5f7", "#f7cfad")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 12, face = "bold", color = "#000000", margin = margin(t = 30, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 8, face = "bold", color = "#000000", margin = margin(t = 0, r = 30, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = .2),
strip.text = element_text(colour = "#000000", size = 5.5, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 30, b = 25, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = "none", fill = "none")
Fst_Plot
# Cleans the environment ~
rm(list=ls())
#install ggman
#library(devtools)
#install_github("drveera/ggman")
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont, lemon, data.table, ggman)
# Loads datasets ~
CRES.PONT <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CRES.PONT--ALLpop_Fst.tsv", header = FALSE)
PONT.CLEW <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_PONT.CLEW--ALLpop_Fst.tsv", header = FALSE)
CLEW.GREV <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CLEW.GREV--ALLpop_Fst.tsv", header = FALSE)
GREV.NISS <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_GREV.NISS--ALLpop_Fst.tsv", header = FALSE)
NISS.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/FULLNOLIST_SlWin_aug22_NISS.LANG_15KB_15KB--Fst.tsv", header = FALSE)
OSTR.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_OSTR.LANG--ALLpop_Fst.tsv", header = FALSE)
# Adds column names to MissingData ~
colnames(CRES.PONT) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(PONT.CLEW) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(CLEW.GREV) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(GREV.NISS) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(NISS.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(OSTR.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
CRES.PONT$Species <- factor(paste("Croatia vs. Spain"))
PONT.CLEW$Species <- factor(paste("Spain vs. Ireland"))
CLEW.GREV$Species <- factor(paste("Ireland vs. Netherlands"))
GREV.NISS$Species <- factor(paste("Netherlands vs. Denmark"))
NISS.LANG$Species <- factor(paste("Denmark vs. South Norway1"))
OSTR.LANG$Species <- factor(paste("South Norway2 vs South Norway1"))
# Adds corrected gPoint to each DF ~
CRES.PONT$gPoint_c <- seq(15000, by = 15000, length.out = nrow(CRES.PONT))
PONT.CLEW$gPoint_c <- seq(15000, by = 15000, length.out = nrow(PONT.CLEW))
CLEW.GREV$gPoint_c <- seq(15000, by = 15000, length.out = nrow(CLEW.GREV))
GREV.NISS$gPoint_c <- seq(15000, by = 15000, length.out = nrow(GREV.NISS))
NISS.LANG$gPoint_c <- seq(15000, by = 15000, length.out = nrow(NISS.LANG))
OSTR.LANG$gPoint_c <- seq(15000, by = 15000, length.out = nrow(OSTR.LANG))
# Adds CHR_State in order to have alternate colours ~
CRES.PONT_CHR_IDs <- as.data.frame(unique(CRES.PONT$CHR)); colnames(CRES.PONT_CHR_IDs) <- c("CHR")
CRES.PONT_CHR_IDs$CHR_IDs <- seq.int(nrow(CRES.PONT_CHR_IDs))
CRES.PONTUp <- merge(CRES.PONT, CRES.PONT_CHR_IDs, by = "CHR")
CRES.PONTUp <- CRES.PONTUp %>% arrange(CHR_IDs)
CRES.PONTUp$CHR_State <- ifelse(CRES.PONTUp$CHR_IDs %% 2 == 0, "Even", "Odd")
PONT.CLEW_CHR_IDs <- as.data.frame(unique(PONT.CLEW$CHR)); colnames(PONT.CLEW_CHR_IDs) <- c("CHR")
PONT.CLEW_CHR_IDs$CHR_IDs <- seq.int(nrow(PONT.CLEW_CHR_IDs))
PONT.CLEWUp <- merge(PONT.CLEW, PONT.CLEW_CHR_IDs, by = "CHR")
PONT.CLEWUp <- PONT.CLEWUp %>% arrange(CHR_IDs)
PONT.CLEWUp$CHR_State <- ifelse(PONT.CLEWUp$CHR_IDs %% 2 == 0, "Even", "Odd")
CLEW.GREV_CHR_IDs <- as.data.frame(unique(CLEW.GREV$CHR)); colnames(CLEW.GREV_CHR_IDs) <- c("CHR")
CLEW.GREV_CHR_IDs$CHR_IDs <- seq.int(nrow(CLEW.GREV_CHR_IDs))
CLEW.GREVUp <- merge(CLEW.GREV, CLEW.GREV_CHR_IDs, by = "CHR")
CLEW.GREVUp <- CLEW.GREVUp %>% arrange(CHR_IDs)
CLEW.GREVUp$CHR_State <- ifelse(CLEW.GREVUp$CHR_IDs %% 2 == 0, "Even", "Odd")
GREV.NISS_CHR_IDs <- as.data.frame(unique(GREV.NISS$CHR)); colnames(GREV.NISS_CHR_IDs) <- c("CHR")
GREV.NISS_CHR_IDs$CHR_IDs <- seq.int(nrow(GREV.NISS_CHR_IDs))
GREV.NISSUp <- merge(GREV.NISS, GREV.NISS_CHR_IDs, by = "CHR")
GREV.NISSUp <- GREV.NISSUp %>% arrange(CHR_IDs)
GREV.NISSUp$CHR_State <- ifelse(GREV.NISSUp$CHR_IDs %% 2 == 0, "Even", "Odd")
NISS.LANG_CHR_IDs <- as.data.frame(unique(NISS.LANG$CHR)); colnames(NISS.LANG_CHR_IDs) <- c("CHR")
NISS.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(NISS.LANG_CHR_IDs))
NISS.LANGUp <- merge(NISS.LANG, NISS.LANG_CHR_IDs, by = "CHR")
NISS.LANGUp <- NISS.LANGUp %>% arrange(CHR_IDs)
NISS.LANGUp$CHR_State <- ifelse(NISS.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
OSTR.LANG_CHR_IDs <- as.data.frame(unique(OSTR.LANG$CHR)); colnames(OSTR.LANG_CHR_IDs) <- c("CHR")
OSTR.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(OSTR.LANG_CHR_IDs))
OSTR.LANGUp <- merge(OSTR.LANG, OSTR.LANG_CHR_IDs, by = "CHR")
OSTR.LANGUp <- OSTR.LANGUp %>% arrange(CHR_IDs)
OSTR.LANGUp$CHR_State <- ifelse(OSTR.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
fulldf <- rbind(CRES.PONTUp, PONT.CLEWUp, CLEW.GREVUp, GREV.NISSUp, NISS.LANGUp, OSTR.LANGUp)
# Reorders Species ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("Croatia vs. Spain",
"Spain vs. Ireland",
"Ireland vs. Netherlands",
"Netherlands vs. Denmark",
"Denmark vs. South Norway1",
"South Norway1 vs South Norway2"))
# Creates plot ~
Fst_Plot <-
ggplot() +
geom_point(data = fulldf, aes(x = gPoint_c, y = Fst, fill= CHR_State, colour = CHR_State), shape = 21, size = .15, alpha = 0.4) +
facet_rep_grid(Species ~. , scales = "free") +
scale_x_continuous("Chromosomes",
expand = c(.005, .005)) +
scale_y_continuous("Fst (15Kb Sliding Windows)",
breaks = c(.30, .60, .90),
labels = c(".3", ".6", ".9"),
limits = c(0, .99),
expand = c(0.01, 0.01)) +
scale_fill_manual(values = c("#add5f7", "#f7cfad")) +
scale_colour_manual(values = c("#add5f7", "#f7cfad")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 12, face = "bold", color = "#000000", margin = margin(t = 30, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 8, face = "bold", color = "#000000", margin = margin(t = 0, r = 30, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = .2),
strip.text = element_text(colour = "#000000", size = 5.5, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 30, b = 25, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = "none", fill = "none")
Fst_Plot
### The BEGINNING ~~~~~
##
# ~ Plots Flatoyster--PSMC | First written by Jos? Cerca with later modification by George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, dplyr, reshape2, lemon, extrafont)
# Loads helper function ~
source("ploting.R")
# Defines parameters ~
FishMut = 0.3e-08 #estuarine oyster value
data_list <- as.data.frame(dir(pattern = ".psmc")); colnames(data_list) <- c("PSMCfile")
#data_list$GenTime <- ifelse(grepl("AtlanticHerring", data_list$PSMCfile), 1, 1)
data_list$GenTime = 1
# Loads PSMC data ~
fulldf <- list()
for (k in 1:nrow(data_list)){
fulldf[[k]] <- psmc.result(file = data_list$PSMCfile[k], g = data_list$GenTime[k], mu = FishMut, s = 500)
fulldf[[k]]$Sample_ID <- gsub(".psmc", "", data_list[k, 1])
fulldf[[k]]$Population <- gsub("[A-z]*HC-", "", fulldf[[k]]$Sample_ID)
fulldf[[k]]$Population <- gsub("_[0-9]*", "", fulldf[[k]]$Population)}
# Melts PSMC data ~
fulldfUp <- melt(fulldf, id = c("Sample_ID", "Population", "YearsAgo", "Ne"))
# Reorders Population ~
fulldfUp$Population <- factor(fulldfUp$Population, ordered = T,
levels = c("ORIS", "PONT",
"TRAL", "CLEW", "WADD", "NISS",
"HYPP",
"VAGS"
))
# Limits YearsAgo to 12K - 100K ~
fulldfUpUp <- fulldfUp %>% filter(YearsAgo >= 1500 & YearsAgo <= 2000100)
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- min(y)
print(y)
if (round(caseVal) == 4349){
c(5000, 10000, 15000, 20000, 30000)}
else if (round(caseVal) == 2457){
c(5000, 10000, 15000, 25000, 50000)}
else if (round(caseVal) == 2347){
c(10000, 25000, 50000, 100000, 150000)}
else if (round(caseVal) ==  17201){
c(25000, 50000, 75000, 100000, 150000)}
else if (round(caseVal) == 2663){
seq(2000, 12000, by = 2000)}}
# Custom y-axis limits ~
limits_fun <- function(x){
caseVal <- min(x)
print(x)
if (round(caseVal) == 3123 || round(caseVal) == 5171){
c(5000, 30000)}
else if (round(caseVal) == 2624 || round(caseVal) == 3312){
c(3000, 60000)}
else if (round(caseVal) == 4064 || round(caseVal) == 6718){
c(3000, 150000)}
else if (round(caseVal) == 9249 || round(caseVal) == 20222){
c(20000, 150000)}
else {
c(3000, 12000)}}
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(x) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
scales::label_number(accuracy = 1, scale = 1/1000, big.mark = "", suffix = "K")(x),
scales::label_number(accuracy = 1, scale = 1/1000, big.mark = "", suffix = "K")(x),
scales::label_number(accuracy = 1, scale = 1/1000, big.mark = "", suffix = "K")(x),
scales::label_number(accuracy = 1, scale = 1/1000, big.mark = "", suffix = "K")(x),
scales::label_number(accuracy = 1, scale = 1/1000, big.mark = "", suffix = "K")(x))}
table(fulldfUp$Population)
# Creates plot ~
PSMC_plot <-
ggplot(fulldfUpUp, aes(YearsAgo, Ne, group = Sample_ID, colour = Population)) +
geom_line(linetype = 1, size = .75, alpha = .9) +
coord_trans(x = "log", y = "log") +
#facet_rep_grid(Population ~. , scales = "free_y") +
scale_colour_manual(values = c("#AD5B35", "#CC480C", "#C89AD1","#91BD96","#02630C","#45D1F7","#240377")) +
scale_x_continuous("Years Ago",
breaks = c(7000, 5000, 10000, 15000, 25000, 50000),
labels = c("7K", "5K", "10K", "15K", "25K", "50K"),
limits = c(5000, 2000100),
expand = c(.005, .005)) +
scale_y_continuous("Effective Population Size (Ne)",
breaks = c(3000, 5000, 10000, 15000, 25000, 50000),
labels = c("3K", "5K", "10K", "15K", "25K", "50K"),
#labels = labels_fun,
expand = c(.05, .05)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", size = .5),
panel.grid.minor = element_blank(),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 30, r = 0, l = 0),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 30, r = 0, b = 10, l = 0)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(t = 0, r = 30, b = 0, l = 10)),
axis.text = element_text(color = "#000000", size = 13, face = "bold"),
axis.ticks = element_line(color = "#000000", size = .3),
strip.text = element_text(colour = "#000000", size = 17, face = "bold"),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
axis.line = element_line(colour = "#000000", size = .3)) +
guides(colour = guide_legend(title = "Populations:", title.theme = element_text(size = 20, face = "bold"),
label.theme = element_text(size = 19), override.aes = list(size = 2, alpha = .9), nrow = 1))
PSMC_plot
# Creates plot ~
PSMC_plot <-
ggplot(fulldfUpUp, aes(YearsAgo, Ne, group = Sample_ID, colour = Population)) +
geom_line(linetype = 1, size = .75, alpha = .9) +
coord_trans(x = "log", y = "log") +
#facet_rep_grid(Population ~. , scales = "free_y") +
scale_colour_manual(values = c("#AD5B35", "#CC480C", "#C89AD1","#91BD96","#45D1F7","#240377")) +
scale_x_continuous("Years Ago",
breaks = c(7000, 5000, 10000, 15000, 25000, 50000),
labels = c("7K", "5K", "10K", "15K", "25K", "50K"),
limits = c(5000, 2000100),
expand = c(.005, .005)) +
scale_y_continuous("Effective Population Size (Ne)",
breaks = c(3000, 5000, 10000, 15000, 25000, 50000),
labels = c("3K", "5K", "10K", "15K", "25K", "50K"),
#labels = labels_fun,
expand = c(.05, .05)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", size = .5),
panel.grid.minor = element_blank(),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 30, r = 0, l = 0),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 30, r = 0, b = 10, l = 0)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(t = 0, r = 30, b = 0, l = 10)),
axis.text = element_text(color = "#000000", size = 13, face = "bold"),
axis.ticks = element_line(color = "#000000", size = .3),
strip.text = element_text(colour = "#000000", size = 17, face = "bold"),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
axis.line = element_line(colour = "#000000", size = .3)) +
guides(colour = guide_legend(title = "Populations:", title.theme = element_text(size = 20, face = "bold"),
label.theme = element_text(size = 19), override.aes = list(size = 2, alpha = .9), nrow = 1))
PSMC_plot
# Saves plot ~
ggsave(PSMC_plot, file = "~/Desktop/Scripts/HighCovOyster_preprocess/08_local_r/03_results/PSMC/HC_all_mu0.3e-8_gen1_22sept22.pdf",
device = cairo_pdf, width = 14, height = 14, scale = 1.35, dpi = 600)
dev.off()
