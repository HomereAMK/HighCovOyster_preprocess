r<- r + geom_line(aes(x=x2, y=var2),colour = "gray")#2
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x3),]
r<- r + geom_line(aes(x=x3, y=var3),colour = "gray")#3
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x4),]
r<- r + geom_line(aes(x=x4, y=var4),colour = "gray")#4
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x5),]
r<- r + geom_line(aes(x=x5, y=var5),colour = "gray")#5
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "gray")#6
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x7),]
r<- r + geom_line(aes(x=x7, y=var7),colour = "gray")#7
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x8),]
r<- r + geom_line(aes(x=x8, y=var8),colour = "gray")#8
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x9),]
r<- r + geom_line(aes(x=x9, y=var9),colour = "gray")#9
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x10),]
r<- r + geom_line(aes(x=x10, y=var10),colour = "gray")#10
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "#80B1D3")#10
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.title = element_blank(),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))
#r
last_plot()
rm(list = ls(all = TRUE))
rd_10_sp1<- read.csv("~/Desktop/μsat_DSC/R_parentage/02_results/sp1_rdx10_3jun.csv",
header=TRUE, stringsAsFactors=FALSE)
rd_10_sp1
#sort by random_rows and fix(df) add var3 =newfam manual col
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x1),]
r<-  ggplot(rd_10_sp1)  + geom_line(aes(x=x1, y=var1),colour = "gray") #1
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x2),]
r<- r + geom_line(aes(x=x2, y=var2),colour = "gray")#2
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x3),]
r<- r + geom_line(aes(x=x3, y=var3),colour = "gray")#3
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x4),]
r<- r + geom_line(aes(x=x4, y=var4),colour = "gray")#4
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x5),]
r<- r + geom_line(aes(x=x5, y=var5),colour = "gray")#5
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "gray")#6
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x7),]
r<- r + geom_line(aes(x=x7, y=var7),colour = "gray")#7
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x8),]
r<- r + geom_line(aes(x=x8, y=var8),colour = "gray")#8
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x9),]
r<- r + geom_line(aes(x=x9, y=var9),colour = "gray")#9
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x10),]
r<- r + geom_line(aes(x=x10, y=var10),colour = "gray")#10
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "#80B1D3")#10
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))
#r
last_plot()
#plot curve 10 resamplings
rm(list = ls(all = TRUE))
rd_10_sp1<- read.csv("~/Desktop/μsat_DSC/R_parentage/02_results/sp1_rdx10_3jun.csv",
header=TRUE, stringsAsFactors=FALSE)
rd_10_sp1
#sort by random_rows and fix(df) add var3 =newfam manual col
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x1),]
r<-  ggplot(rd_10_sp1)  + geom_line(aes(x=x1, y=var1),colour = "gray") #1
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x2),]
r<- r + geom_line(aes(x=x2, y=var2),colour = "gray")#2
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x3),]
r<- r + geom_line(aes(x=x3, y=var3),colour = "gray")#3
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x4),]
r<- r + geom_line(aes(x=x4, y=var4),colour = "gray")#4
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x5),]
r<- r + geom_line(aes(x=x5, y=var5),colour = "gray")#5
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "gray")#6
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x7),]
r<- r + geom_line(aes(x=x7, y=var7),colour = "gray")#7
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x8),]
r<- r + geom_line(aes(x=x8, y=var8),colour = "gray")#8
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x9),]
r<- r + geom_line(aes(x=x9, y=var9),colour = "gray")#9
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x10),]
r<- r + geom_line(aes(x=x10, y=var10),colour = "gray")#10
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "#80B1D3")#10
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 10, face = "bold"),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))+
#r
last_plot()
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 10, face = "bold"),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))+
#r
last_plot()
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 10, face = "bold"),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))
#r
last_plot()
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.text.x = element_text(colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 10, face = "bold"),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))
rm(list = ls(all = TRUE))
rd_10_sp1<- read.csv("~/Desktop/μsat_DSC/R_parentage/02_results/sp1_rdx10_3jun.csv",
header=TRUE, stringsAsFactors=FALSE)
rd_10_sp1
#sort by random_rows and fix(df) add var3 =newfam manual col
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x1),]
r<-  ggplot(rd_10_sp1)  + geom_line(aes(x=x1, y=var1),colour = "gray") #1
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x2),]
r<- r + geom_line(aes(x=x2, y=var2),colour = "gray")#2
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x3),]
r<- r + geom_line(aes(x=x3, y=var3),colour = "gray")#3
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x4),]
r<- r + geom_line(aes(x=x4, y=var4),colour = "gray")#4
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x5),]
r<- r + geom_line(aes(x=x5, y=var5),colour = "gray")#5
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "gray")#6
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x7),]
r<- r + geom_line(aes(x=x7, y=var7),colour = "gray")#7
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x8),]
r<- r + geom_line(aes(x=x8, y=var8),colour = "gray")#8
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x9),]
r<- r + geom_line(aes(x=x9, y=var9),colour = "gray")#9
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x10),]
r<- r + geom_line(aes(x=x10, y=var10),colour = "gray")#10
rd_10_sp1 <- rd_10_sp1[order(rd_10_sp1$x6),]
r<- r + geom_line(aes(x=x6, y=var6),colour = "#80B1D3")#10
r<-r+coord_cartesian(clip="off")+
xlab("N = cumulative number of spats \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(panel.background = element_rect(fill = "#ffffff"),
plot.margin = margin(t = 0.005, b = 0.005, r = .2, l = .2, unit = "cm"),
axis.text.x = element_text(colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 10, face = "bold"),
axis.ticks = element_line(color = "#000000", size = 1),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 25, r = 0, l = 0),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 10, face="bold"))
#r
last_plot()
#r
last_plot()
ggsave("~/Desktop/μsat_DSC/R_parentage/02_results/CumRd10xT1_2020_sp1_feb22.pdf", device = cairo_pdf, width = 16, height = 8, dpi = 600)
dev.off
r<-r  +coord_cartesian(clip="off")+geom_rangeframe()+
xlab("Cumulative number of offsprings \n  (Large sp1) ") + ylab("Full-sibship families found \n(n=15)") +
scale_x_continuous(breaks = c(1,10,20,30,40,50))+ scale_y_continuous(breaks = c(1,5,10,15))+
theme(
panel.background = element_rect(fill = "#ffffff"),
panel.spacing = unit(.2, "lines"),
axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5, size = 1),
strip.background = element_rect(colour = "#000000", fill = "#FAFAFA", size = .05),
strip.text.x = element_text(colour = "#000000", face = "bold", size = 4, angle = 90, margin = margin(.75, 0, .75, 0, "cm")),
strip.text.y = element_text(colour = "#000000", face = "bold", size = 10, angle = 90, margin = margin(0, .1, 0, .1, "cm")),
legend.position = "none")
# Loads required packages ~
pacman::p_load(adegenet)
# Loads dist matrix ~
DistMatrix <- as.matrix(read.table(file = "Downloads/UltraMT_Changed_corrected.dist", head = FALSE, row.names = 1))
# Creates phylogeny ~
NJphylo <- bionj(as.dist(Matrix))
install.packages("ape")
# Creates phylogeny ~
NJphylo <- bionj(as.dist(Matrix))
# Loads required packages ~
pacman::p_load(adegenet)
# Loads dist matrix ~
DistMatrix <- as.matrix(read.table(file = "Downloads/UltraMT_Changed_corrected.dist", head = FALSE, row.names = 1))
# Creates phylogeny ~
NJphylo <- bionj(as.dist(Matrix))
# Loads required packages ~
pacman::p_load(adegenet, ape)
# Loads dist matrix ~
DistMatrix <- as.matrix(read.table(file = "Downloads/UltraMT_Changed_corrected.dist", head = FALSE, row.names = 1))
# Creates phylogeny ~
NJphylo <- bionj(as.dist(Matrix))
# Loads dist matrix ~
DistMatrix <- as.matrix(read.table(file = "Downloads/UltraMT_Changed_corrected.dist", head = FALSE, row.names = 1))
# Creates phylogeny ~
NJphylo <- bionj(as.dist(Matrix))
# Creates phylogeny ~
NJphylo <- bionj(as.dist(DistMatrix))
# Saves phylogeny ~
write.tree(NJphylo, file = "Downloads//NJphylo.nwk")
pml(NJphylo, dna2, k=4)
# Loads required packages ~
pacman::p_load(adegenet, ape, phangorn)
# Loads dist matrix ~
DistMatrix <- as.matrix(read.table(file = "Downloads/UltraMT_Changed_corrected.dist", head = FALSE, row.names = 1))
# Creates phylogeny ~
NJphylo <- bionj(as.dist(DistMatrix))
pml(NJphylo, dna2, k=4)
pml(NJphylo, k=4)
tr <- fastme.bal(DistMatrix)
write.tree(tr, file = "Downloads/Fastmephylo.nwk")
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Fst | By George Pacheco modified by Homère J. Alves Monteiro
# Cleans the environment ~
rm(list=ls())
#install ggman
#library(devtools)
#install_github("drveera/ggman")
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont, lemon, data.table, ggman)
# Loads datasets ~
CRES.PONT <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CRES.PONT--ALLpop_Fst.tsv", header = FALSE)
PONT.CLEW <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_PONT.CLEW--ALLpop_Fst.tsv", header = FALSE)
CLEW.GREV <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_CLEW.GREV--ALLpop_Fst.tsv", header = FALSE)
GREV.NISS <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_GREV.NISS--ALLpop_Fst.tsv", header = FALSE)
NISS.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/FULLNOLIST_SlWin_aug22_NISS.LANG_15KB_15KB--Fst.tsv", header = FALSE)
OSTR.LANG <- read.table("~/Desktop/Scripts/Data/FST/15kb_window/SLWin15kb_15kbstep_Aug22_LIST_OSTR.LANG--ALLpop_Fst.tsv", header = FALSE)
# Adds column names to MissingData ~
colnames(CRES.PONT) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(PONT.CLEW) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(CLEW.GREV) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(GREV.NISS) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(NISS.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
colnames(OSTR.LANG) <- c("CHR", "SNP", "gPoint", "END", "NumberOfSites", "Fst")
# Adds Pops column to each DF ~
CRES.PONT$Species <- factor(paste("Croatia vs. Spain"))
PONT.CLEW$Species <- factor(paste("Spain vs. Ireland"))
CLEW.GREV$Species <- factor(paste("Ireland vs. Netherlands"))
GREV.NISS$Species <- factor(paste("Netherlands vs. Denmark"))
NISS.LANG$Species <- factor(paste("Denmark vs. South Norway1"))
OSTR.LANG$Species <- factor(paste("South Norway1 vs South Norway2"))
# Adds corrected gPoint to each DF ~
CRES.PONT$gPoint_c <- seq(15000, by = 15000, length.out = nrow(CRES.PONT))
PONT.CLEW$gPoint_c <- seq(15000, by = 15000, length.out = nrow(PONT.CLEW))
CLEW.GREV$gPoint_c <- seq(15000, by = 15000, length.out = nrow(CLEW.GREV))
GREV.NISS$gPoint_c <- seq(15000, by = 15000, length.out = nrow(GREV.NISS))
NISS.LANG$gPoint_c <- seq(15000, by = 15000, length.out = nrow(NISS.LANG))
OSTR.LANG$gPoint_c <- seq(15000, by = 15000, length.out = nrow(OSTR.LANG))
# Adds CHR_State in order to have alternate colours ~
CRES.PONT_CHR_IDs <- as.data.frame(unique(CRES.PONT$CHR)); colnames(CRES.PONT_CHR_IDs) <- c("CHR")
CRES.PONT_CHR_IDs$CHR_IDs <- seq.int(nrow(CRES.PONT_CHR_IDs))
CRES.PONTUp <- merge(CRES.PONT, CRES.PONT_CHR_IDs, by = "CHR")
CRES.PONTUp <- CRES.PONTUp %>% arrange(CHR_IDs)
CRES.PONTUp$CHR_State <- ifelse(CRES.PONTUp$CHR_IDs %% 2 == 0, "Even", "Odd")
PONT.CLEW_CHR_IDs <- as.data.frame(unique(PONT.CLEW$CHR)); colnames(PONT.CLEW_CHR_IDs) <- c("CHR")
PONT.CLEW_CHR_IDs$CHR_IDs <- seq.int(nrow(PONT.CLEW_CHR_IDs))
PONT.CLEWUp <- merge(PONT.CLEW, PONT.CLEW_CHR_IDs, by = "CHR")
PONT.CLEWUp <- PONT.CLEWUp %>% arrange(CHR_IDs)
PONT.CLEWUp$CHR_State <- ifelse(PONT.CLEWUp$CHR_IDs %% 2 == 0, "Even", "Odd")
CLEW.GREV_CHR_IDs <- as.data.frame(unique(CLEW.GREV$CHR)); colnames(CLEW.GREV_CHR_IDs) <- c("CHR")
CLEW.GREV_CHR_IDs$CHR_IDs <- seq.int(nrow(CLEW.GREV_CHR_IDs))
CLEW.GREVUp <- merge(CLEW.GREV, CLEW.GREV_CHR_IDs, by = "CHR")
CLEW.GREVUp <- CLEW.GREVUp %>% arrange(CHR_IDs)
CLEW.GREVUp$CHR_State <- ifelse(CLEW.GREVUp$CHR_IDs %% 2 == 0, "Even", "Odd")
GREV.NISS_CHR_IDs <- as.data.frame(unique(GREV.NISS$CHR)); colnames(GREV.NISS_CHR_IDs) <- c("CHR")
GREV.NISS_CHR_IDs$CHR_IDs <- seq.int(nrow(GREV.NISS_CHR_IDs))
GREV.NISSUp <- merge(GREV.NISS, GREV.NISS_CHR_IDs, by = "CHR")
GREV.NISSUp <- GREV.NISSUp %>% arrange(CHR_IDs)
GREV.NISSUp$CHR_State <- ifelse(GREV.NISSUp$CHR_IDs %% 2 == 0, "Even", "Odd")
NISS.LANG_CHR_IDs <- as.data.frame(unique(NISS.LANG$CHR)); colnames(NISS.LANG_CHR_IDs) <- c("CHR")
NISS.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(NISS.LANG_CHR_IDs))
NISS.LANGUp <- merge(NISS.LANG, NISS.LANG_CHR_IDs, by = "CHR")
NISS.LANGUp <- NISS.LANGUp %>% arrange(CHR_IDs)
NISS.LANGUp$CHR_State <- ifelse(NISS.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
OSTR.LANG_CHR_IDs <- as.data.frame(unique(OSTR.LANG$CHR)); colnames(OSTR.LANG_CHR_IDs) <- c("CHR")
OSTR.LANG_CHR_IDs$CHR_IDs <- seq.int(nrow(OSTR.LANG_CHR_IDs))
OSTR.LANGUp <- merge(OSTR.LANG, OSTR.LANG_CHR_IDs, by = "CHR")
OSTR.LANGUp <- OSTR.LANGUp %>% arrange(CHR_IDs)
OSTR.LANGUp$CHR_State <- ifelse(OSTR.LANGUp$CHR_IDs %% 2 == 0, "Even", "Odd")
# Gets column names ~
fulldf <- rbind(CRES.PONTUp, PONT.CLEWUp, CLEW.GREVUp, GREV.NISSUp, NISS.LANGUp, OSTR.LANGUp)
# Reorders Species ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("Croatia vs. Spain",
"Spain vs. Ireland",
"Ireland vs. Netherlands",
"Netherlands vs. Denmark",
"Denmark vs. South Norway1",
"South Norway1 vs South Norway2"))
fulldf$CHR <- factor(fulldf$CHR, ordered = T,
levels = c("scaffold1",
"scaffold2",
"scaffold3",
"scaffold4",
"scaffold5",
"scaffold6",
"scaffold7",
"scaffold8",
"scaffold9",
"scaffold10"))
#fulldf$CHR_IDs <- factor(fulldf$CHR_IDs, ordered = T,
#                     levels = c("1",
#                                "2",
#                                "3",
#                                "4",
#                                "5",
#                                "6",
#                                "7",
#                                "8",
#                                "9",
#                                "10"))
# Creates plot ~
Fst_Plot <-
ggplot() +
geom_point(data = fulldf, aes(x = gPoint_c, y = Fst, fill= CHR_State, colour = CHR_State), shape = 21, size = .15, alpha = 0.4) +
facet_rep_grid(Species~. , scales = "free_x") +
scale_x_continuous("Chromosomes",
expand = c(.005, .005)) +
scale_y_continuous("Fst (15Kb Sliding Windows)",
breaks = c(.30, .60, .90),
labels = c(".30", ".60", ".90"),
limits = c(0, .99),
expand = c(0.01, 0.01)) +
scale_fill_manual(values = c("#add5f7", "#f7cfad")) +
scale_colour_manual(values = c("#add5f7", "#f7cfad")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 12, face = "bold", color = "#000000", margin = margin(t = 30, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 8, face = "bold", color = "#000000", margin = margin(t = 0, r = 30, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.text.y = element_text(colour = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = .2),
strip.text = element_text(colour = "#000000", size = 5.5, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 30, b = 25, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = "none", fill = "none")
# Saves Manhattan plot ~
ggsave(Fst_Plot, file = "~/Desktop/Scripts/Flat_oysters/04_local_R/03_results/FST/GEO_Combined--Fst_Window15kb15kb_geographicalCline.pdf",
device = cairo_pdf, scale = 1, width = 30, height = 15, dpi = 600)
ggsave(Fst_Plot, file = "~/Desktop/Scripts/Flat_oysters/04_local_R/03_results/FST/GEO_Combined--Fst_Window15kb15kb_geographicalCline.pdf",
device = cairo_pdf, scale = 1, width = 30, height = 15, dpi = 300)
ggsave(Fst_Plot, file = "~/Desktop/Scripts/Flat_oysters/04_local_R/03_results/FST/GEO_Combined--Fst_Window15kb15kb_geographicalCline.jpeg",
scale = 1, width = 30, height = 12, dpi = 600)
ggsave(Fst_Plot, file = "~/Desktop/Scripts/Flat_oysters/04_local_R/03_results/FST/GEO_Combined--Fst_Window15kb15kb_geographicalCline.jpeg",
scale = 1, width = 30, height = 12, dpi = 200)
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--SMC++ | By George Pacheco modified by Homère J. Alves Monteiro
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, dplyr, reshape2, lemon, extrafont)
# Defines parameters ~
data_list <- as.data.frame(dir(pattern = ".csv")); colnames(data_list) <- c("SMCfile")
# Loads PSMC data ~ with Lurida, now in a separate folder
#fulldf <- list()
#for (k in 1:nrow(data_list)){
#  fulldf[[k]] <- read.table(file = data_list$SMCfile[k], sep = ",", header = TRUE)
#  fulldf[[k]]$Sample <- gsub("_*.csv", "", data_list[k, 1])
#  fulldf[[k]]$Population <- gsub("[A-z]*_", "", fulldf[[k]]$Sample)}
# Loads PSMC data ~ No lurida
fulldf <- list()
for (k in 1:nrow(data_list)){
fulldf[[k]] <- read.table(file = data_list$SMCfile[k], sep = ",", header = TRUE)
fulldf[[k]]$Sample <- gsub("_*noluri.csv", "", data_list[k, 1])
fulldf[[k]]$Population <- gsub("[A-z]*_", "", fulldf[[k]]$Sample)}
# Melts PSMC data ~
fulldfUp <- melt(fulldf, id = c("label", "x", "y", "plot_type", "plot_num", "Sample", "Population"))
# Corrects Species names ~
#levels(fulldfUp$Species <- sub("AtlanticCod", "Atlantic Cod", fulldfUp$Species))
#levels(fulldfUp$Species <- sub("EuropeanFlounder", "European Flounder", fulldfUp$Species))
#levels(fulldfUp$Species <- sub("NEWAtlanticHerring", "New Atlantic Herring", fulldfUp$Species))
#levels(fulldfUp$Species <- sub("AtlanticHerring", "Atlantic Herring", fulldfUp$Species))
# Reorders Population ~
fulldfUp$Population <- factor(fulldfUp$Population, ordered = T,
levels = c("ORIS", "PONT",
"TRAL", "CLEW", "WADD", "NISS",
"HYPP",
"VAGS"
))
# Corrects Population names ~
#levels(fulldfUp$Population <- sub("Oeresund", "?resund", fulldfUp$Population))
#levels(fulldfUp$Population <- sub("BalticSeaAutumnSpawning", "Baltic Sea Autumn Spawning", fulldfUp$Population))
#levels(fulldfUp$Population <- sub("BalticSea", "Baltic Sea", fulldfUp$Population))
#levels(fulldfUp$Population <- sub("NorthSea", "North Sea", fulldfUp$Population))
#levels(fulldfUp$Population <- sub("BornholmBasin", "Bornholm Basin", fulldfUp$Population))
# Creates SMC++ ~
SMCpp_Plot <-
ggplot(data = fulldfUp, aes(x = x, y = y, colour = Population)) +
geom_path(size = 1.1, linejoin = "round", lineend = "butt", linemitre = 10) +
coord_trans(x = "log1p", y = "log1p") +
#facet_rep_grid(Population ~. , scales = "free_x") +
scale_colour_manual(values = c("#AD5B35", "#CC480C", "#C89AD1", "#C89AD1","#91BD96","#02630C","#45D1F7","#240377")) +
scale_x_continuous("Years Ago",
breaks = c(0, 50, 10000, 15000, 20000, 30000,  40000,  50000, 60000, 100000),
labels = c("0", "50", "10Kb", "15Kb", "20Kb",  "30Kb", "40Kb",  "50Kb", "60Kb", "100Kb"),
limits = c(0, 3000000),
expand = c(0, 0)) +
scale_y_continuous("Effective Population Size (Ne)",
breaks = c(0, 50, 10000, 15000, 20000, 30000,  40000,  50000, 60000, 100000),
labels = c("0", "50", "10Kb", "15Kb", "20Kb",  "30Kb", "40Kb",  "50Kb", "60Kb", "100Kb"),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
#panel.grid.major = element_line(color = "#ededed", linetype = "dashed", size = .00005),
#panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 30, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 0, r = 30, b = 0, l = 0)),
axis.text.x = element_text(colour = "#000000", size = 12, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 12, face = "bold"),
axis.ticks = element_line(color = "#000000", size = .3),
#strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = .3),
#strip.text = element_text(colour = "#000000", size = 12, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 30, b = 25, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Populations:", title.theme = element_text(size = 19, face = "bold"),
label.theme = element_text(size = 17), override.aes = list(size = 1.4), nrow = 1))
ggplot(data = fulldfUp, aes(x = x, y = y, colour = Population)) +
geom_path(size = 1.1, linejoin = "round", lineend = "butt", linemitre = 10) +
coord_trans(x = "log1p", y = "log1p") +
#facet_rep_grid(Population ~. , scales = "free_x") +
scale_colour_manual(values = c("#AD5B35", "#CC480C", "#C89AD1", "#C89AD1","#91BD96","#02630C","#45D1F7","#240377")) +
scale_x_continuous("Years Ago",
breaks = c(0, 50, 10000, 15000, 20000, 30000,  40000,  50000, 60000, 100000),
labels = c("0", "50", "10Kb", "15Kb", "20Kb",  "30Kb", "40Kb",  "50Kb", "60Kb", "100Kb"),
limits = c(0, 3000000),
expand = c(0, 0)) +
scale_y_continuous("Effective Population Size (Ne)",
breaks = c(0, 50, 10000, 15000, 20000, 30000,  40000,  50000, 60000, 100000),
labels = c("0", "50", "10Kb", "15Kb", "20Kb",  "30Kb", "40Kb",  "50Kb", "60Kb", "100Kb"),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
#panel.grid.major = element_line(color = "#ededed", linetype = "dashed", size = .00005),
#panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 30, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 0, r = 30, b = 0, l = 0)),
axis.text.x = element_text(colour = "#000000", size = 12, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(colour = "#000000", size = 12, face = "bold"),
axis.ticks = element_line(color = "#000000", size = .3),
#strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = .3),
#strip.text = element_text(colour = "#000000", size = 12, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 30, b = 25, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Populations:", title.theme = element_text(size = 19, face = "bold"),
label.theme = element_text(size = 17), override.aes = list(size = 1.4), nrow = 1))
